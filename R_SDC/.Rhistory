# seleccionando todos los valores de las 3ras columnas
v1[,3,]
id = 1:10
nivel_educ = c(rep('tecnico',3), rep('universitario',7))
salario = rpois(10, 1500)
salario
hist(rpois(10, 1500))
hist(rpois(10000, 1500))
df = data.frame(id, nivel_educ, salario)
df
viaje_extranjero = rep('si',4)
df = data.frame(df, viaje_extranjero)
df
library(tibble)
df2 = data_frame(id, nivel_educ, salario)  # tibble()
df2
df2 = tibble(id, nivel_educ, salario)  # tibble()
df2
genero = c(rep(1,5), rep(2,5))
df = data.frame(df, genero)
df
df = tibble(df, genero)
df
df = data.frame(df, genero)
df
rm(df)
df = data.frame(df, viaje_extranjero)
df = data.frame(id, nivel_educ, salario)
df2 = tibble(id, nivel_educ, salario)  # tibble()
genero = c(rep(1,5), rep(2,5))
df = data.frame(df, genero)
df
df$genero == NULL
df
df$genero = NULL
df
df$genero = as.factor(df$genero)
df = data.frame(df, genero)
df$genero = as.factor(df$genero)
str(df)
df
tibble(df)
levels(df$genero)
levels(df$genero) = c("hombre", "mujer")
str(df)
df
v1 = round(seq(from=15, to=50, length=20),1)
v1
m1 = matrix(rpois(20,5), nrow=5, ncol=4)
m1
lista_1 = list(v1, m1, df)
lista_1
length(lista_1) #N° de elementos de la lista
lista_1[2]
a = class(lista_1[2])
class(lista_1[2])
a2 = lista_1[[2]]
a2
class(a2)
lista_1[[1]]
lista_1[2]
lista_1[[1]]
lista_1[1]
class(lista_1[[1]])
lista_1[1][1:8]  # NO VA SALIR
lista_1[[1]][1:8]
x = 6
if(x > 5){
y = TRUE
}
y
rm(y)
x = 3
if(x > 5){
y = TRUE
}
y
x = 6
if(x > 5){
y = TRUE
}
y
x = 6
if(x > 5){
y = 'hola'
}
y
if(x > 5){w = TRUE}
w
x = 3
if(x > 5){
y = TRUE
} else {
y = FALSE
}
y
rm(y)
rm(y)
if(x > 5){y = TRUE} else
{y = FALSE}
y
if(x > 5){y = TRUE} else {y = FALSE}
if(x > 5){y = TRUE}
else {y = FALSE}
if(x > 5){
y = TRUE
} else {
y = FALSE
}
#x = runif(1)
x = 0.1
ifelse(x > 0.5, "mayor", "menor")
x = 5
y = 15
if(x == y){
cat("iguales")
} else if (x < y){
cat("x menor a y")
} else {
cat("x mayor a y")
}
# este blucle no tiene fin
count = 0
repeat{
print(count)
count = count + 1
}
if(count == 30) break   # aqui se detiene el bucle
# este bucle si tiene fin
count = 0
repeat{
print(count)
count = count + 1
if(count == 30) break   # aqui se detiene el bucle
}
v = LETTERS[1:10]
v
for(i in v){
print(i)
}
x = matrix(1:6, 2, 3)
x
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
print(x[i,j])
}
}
#Con iteraciones
nrow(x)
ncol(x)
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
print(x[i,j])
}
}
for(i in seq_len(nrow(x))){
for(j in seq_len(ncol(x))){
print(x[i,j])
}
}
# Manual
print(x[1,1])
seq_len(nrow(x))
1:nrow(x)
seq_len(nrow(x))
valor = 4
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(x[i, j] == valor){
indices = c(i, j)
print(indices)
}
}
}
for(i in seq_len(nrow(x))){
for(j in seq_len(ncol(x))){
if(x[i, j] == valor){
indices = c(i, j)
print(indices)
}
}
}
valor = 2
for(i in seq_len(nrow(x))){
for(j in seq_len(ncol(x))){
if(x[i, j] == valor){
indices = c(i, j)
print(indices)
}
}
}
count = 1
while(count <= 10){
print(count)
count = count + 1
}
while(count <= 10){
print(count)
count = count * 1
}
while(count <= 10){
print(count)
count = count * count
}
while(count <= 10){
print(count)
count = count +1
}
while(count <= 10){
print(count)
count = count +1
}
count = 1
while(count <= 10){
print(count)
count = count +1
}
count = 1
while(count <= 10){
print(count)
count = count * count
}
count = 1
while(count <= 10){
print(count)
count = count + 1
}
while(count <= 10){
count = count + 1
print(count)
}
count = 1
while(count <= 10){
count = count + 1
print(count)
}
while(count <= 3){
print(count)
count = count + 1
}
count = 1
while(count <= 3){
print(count)
count = count + 1
}
funcion1 = function(a) {
for(i in 1:a){
b = i^2
print(b)
}
}
funcion1(5)
1:3.2
1:3.6
funcion2 = function(){
for(i in 1:4){
print(i^2)
}
}
funcion2()
funcion2(5)
funcion3 = function(a=3, b=6){
c = a*b
print(c)
}
funcion3()
funcion3(5, 10)
setwd("D:/Desktop/UNMSM/SDC-Learning/R_SDC/Datasets1")
ifd = read.csv("insurance_fraud_data.txt")
ifd = read.csv("Datasets1/insurance_fraud_data.txt")
str(ifd)
head(ifd)
library(readxl)
ed = read_excel("Datasets1/Employee data.xlsx")
str(ed)
head(ed)
head(ed)
# *json ----
library(rjson)
matrix(1:15, nrow = 3, ncol = 4)
library(readxl)
read_excel()
timeplot()
setwd("D:/Desktop/UNMSM/SDC-Learning/R_SDC/Datasets1")
getwd()
ifd = read.csv("insurance_fraud_data.txt", header = F)
ifd
ifd = read.csv("insurance_fraud_data.txt", header = T)
str(ifd)
library(readxl)
ifd = read.csv("insurance_fraud_data.txt", header = T)
view(ifd)
View(ifd)
ed = read_excel("Employee data.xlsx")
ifd = read_csv("insurance_fraud_data.txt", header = T)
ifd = read.csv("insurance_fraud_data.txt", header = T)
ed = read_excel("Employee data.xlsx")
str(ed)
ed
ed
str(ifd)
str(ed)
View(ed)
library(foreign)
enaho = read.spss("404-Modulo01-muestra2.sav",
to.data.frame = T)
ed = read_excel("Employee data.xlsx")
ifd = read.csv("insurance_fraud_data.txt", header = T)
enaho = read.spss("404-Modulo01-muestra2.sav",
to.data.frame = T)
View(enaho)
clientes = read_excel("Clientes_2016_2017.xlsx")
clientes = read_excel("Clientes_2016_2017.xlsx")
str(clientes)
clientes
View(clientes)
str(clientes)
summary(clientes) #Resumen estadistico de cada variable
clientes$SEXO = as.factor(clientes$SEXO)
clientes$REGION = as.factor(clientes$REGION)
clientes$CASADO = as.factor(clientes$CASADO)
clientes$AUTO = as.factor(clientes$AUTO)
str(clientes)
summary(clientes)
clientes[clientes$SEXO == "FEMENINO"
& clientes$INGRESOS >= 24000
& clientes$HIJOS >= 1]
clientes[clientes$SEXO == "FEMENINO"
& clientes$INGRESOS >= 24000
& clientes$HIJOS >= 1, ]
clientes2 = clientes[clientes$SEXO=="FEMENINO" &
clientes$INGRESOS >= 24000 &
clientes$HIJOS>=1,]
summary(clientes2)
attach(clientes)
clientes3_2 = clientes[SEXO=="FEMENINO" &
INGRESOS >= 24000 &
HIJOS>=1 &
(REGION=="LIMA_NORTE" |
REGION=="LIMA_ESTE")]
clientes3_2 = clientes[SEXO=="FEMENINO" &
INGRESOS >= 24000 &
HIJOS>=1 &
(REGION=="LIMA_NORTE" |
REGION=="LIMA_ESTE"), ]
summary(clientes3_2)
detach(clientes) #Quitar attach
rm(clientes3_2)
clientes3_2 = clientes[SEXO=="FEMENINO" &
INGRESOS >= 24000 &
HIJOS>=1 &
(REGION=="LIMA_NORTE" |
REGION=="LIMA_ESTE"), ]
# Seleccionar la variable SEXO
head(clientes$SEXO)
head(clientes[,"SEXO"])
head(clientes[,3])
head(clientes[,"SEXO":"CASADO"]) # en python s? sale
head(clientes[,3:6])
head(clientes[,3:6])
tail(clientes[,3:6])
head(clientes[,3:6], 20)
head(clientes[,3:6], 20)
clientes$M1 = clientes$INGRESOS / (clientes$EDAD*10)
band = read.csv("band.csv")
instrument = read.csv("instrument.csv")
band
instrument
library(dplyr)
band
instrument
left_join(band, instrument, by="name")
left_join(band, instrument, by="name")
right_join(band, instrument, by="name")
band
instrument
band
instrument
left_join(band, instrument, by="name")
right_join(band, instrument, by="name")
band
instrument
left_join(band, instrument, by="name")
right_join(band, instrument, by="name")
band
instrument
right_join(band, instrument, by="name")
inner_join(band, instrument, by="name")
full_join(band, instrument, by="name")
View(band)
View(band)
View(band)
# REVISAR: outer join - inner join
version
dep2016 = read.csv("Depositos_2016.csv")
dep2017 = read.csv("Depositos_2017.csv")
dep2016
dep_2016_2017 = rbind(dep2016, dep2017)
dep_2016_2017
paises = data.frame(country = c("FR", "DE", "US"),
a2011 = c(7000, 5800, 15000),
a2012 = c(6900, 6000, 14000),
a2013 = c(7000, 6200, 13000))
paises
paises2 = gather(paises, key = "años", value = "cant", 2:4)
paises2
library(tidyr)
paises2 = gather(paises, key = "años", value = "cant", 2:4)
paises2
paises
paises2 = gather(paises, key = "años", value = "cant", 1:4)
paises2
paises2 = gather(paises, key = "años", value = "cant", 2:4)
paises2
paises3 = spread(paises2, key = "años", value = "cant")
paises3
paises
str(paises2)
str(paises2)
paises2
summarise(group_by(paises2, años)
paises2_resumen1 = summarise(group_by(paises2, años)
summarise(group_by(paises2, años)
paises2_resumen1 = summarise(group_by(paises2, años),
cant_min = min(cant),
cant_max = max(cant),
cant_prom = mean(cant),
cant_sum = sum(cant),
cant_desv = sd(cant),
cant_med = median(cant))
library(dplyr)
paises2_resumen1 = summarise(group_by(paises2, años),
cant_min = min(cant),
cant_max = max(cant),
cant_prom = mean(cant),
cant_sum = sum(cant),
cant_desv = sd(cant),
cant_med = median(cant))
summarise(group_by(paises2, años)
paises2_resumen1 = group_by(paises2, años) %>% sumarize(
cant_min = min(cant),
cant_max = max(cant),
cant_prom = mean(cant),
cant_sum = sum(cant),
cant_desv = sd(cant),
cant_med = median(cant))
paises2_resumen1 = summarise(group_by(paises2, años),
cant_min = min(cant),
cant_max = max(cant),
cant_prom = mean(cant),
cant_sum = sum(cant),
cant_desv = sd(cant),
cant_med = median(cant))
paises2_resumen1
paises2_resumen1 = paises2 %>% group_by(años) %>% sumarize(
cant_min = min(cant),
cant_max = max(cant),
cant_prom = mean(cant),
cant_sum = sum(cant),
cant_desv = sd(cant),
cant_med = median(cant))
library(dplyr)
paises2_resumen1 = paises2 %>% group_by(años) %>%
summarize(
cant_min = min(cant),
cant_max = max(cant),
cant_prom = mean(cant),
cant_sum = sum(cant),
cant_desv = sd(cant),
cant_med = median(cant))
paises2_resumen1
paises2_resumen1
clientes_rep = summarise(group_by(clientes, SEXO, REGION),
Ingr_min = min(INGRESOS),
Ingr_max = max(INGRESOS),
Ingr_prom = mean(INGRESOS),
Ingr_rango = (Ingr_max-Ingr_min))
clientes_rep
write.csv(clientes_rep, 'cliente_rep_exp.csv', row.names = F)
clientes
clientes %>%
group_by(SEXO, REGION) %>%
summarise(Ingr_min = min(INGRESOS),
Ingr_max = max(INGRESOS),
Ingr_prom = mean(INGRESOS),
Ingr_rang = Ingr_max - Ingr_min)
clientes_calc <- clientes %>%
group_by(SEXO, REGION) %>%
summarise(Ingr_min = min(INGRESOS),
Ingr_max = max(INGRESOS),
Ingr_prom = mean(INGRESOS),
Ingr_rang = Ingr_max - Ingr_min)
clientes_calc
clientes_rep
library(openxlsx)
install.packages("openxlsx")
library(openxlsx)
setwd("F:/Cursos/SDC/P de Espec en R 2021/Modulo1/datasets")
library(foreign)
enahoM01 = read.spss('Enaho01-2019-100.sav', to.data.frame = T)
# Seleccionar ciertas columnas y registros
install.packages("foreign")
install.packages("foreign")
library(foreign)
enahoM01 = read.spss('Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = read.spss('Datasets1/Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = enahoM01[,c(1:14, 24:32, 34:37, 47:48, 58:59, 69:70,
80:83, 131:133, 141, 191:193, 318:322)]
enahoM01
enahoM01 = read.spss('Datasets1/Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = enahoM01[,c(1:14, 24:32, 34:37, 47:48, 58:59, 69:70,
80:83, 131:133, 141, 191:193, 318:322)]
