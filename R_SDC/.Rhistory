str(ed)
View(ed)
library(foreign)
enaho = read.spss("404-Modulo01-muestra2.sav",
to.data.frame = T)
ed = read_excel("Employee data.xlsx")
ifd = read.csv("insurance_fraud_data.txt", header = T)
enaho = read.spss("404-Modulo01-muestra2.sav",
to.data.frame = T)
View(enaho)
clientes = read_excel("Clientes_2016_2017.xlsx")
clientes = read_excel("Clientes_2016_2017.xlsx")
str(clientes)
clientes
View(clientes)
str(clientes)
summary(clientes) #Resumen estadistico de cada variable
clientes$SEXO = as.factor(clientes$SEXO)
clientes$REGION = as.factor(clientes$REGION)
clientes$CASADO = as.factor(clientes$CASADO)
clientes$AUTO = as.factor(clientes$AUTO)
str(clientes)
summary(clientes)
clientes[clientes$SEXO == "FEMENINO"
& clientes$INGRESOS >= 24000
& clientes$HIJOS >= 1]
clientes[clientes$SEXO == "FEMENINO"
& clientes$INGRESOS >= 24000
& clientes$HIJOS >= 1, ]
clientes2 = clientes[clientes$SEXO=="FEMENINO" &
clientes$INGRESOS >= 24000 &
clientes$HIJOS>=1,]
summary(clientes2)
attach(clientes)
clientes3_2 = clientes[SEXO=="FEMENINO" &
INGRESOS >= 24000 &
HIJOS>=1 &
(REGION=="LIMA_NORTE" |
REGION=="LIMA_ESTE")]
clientes3_2 = clientes[SEXO=="FEMENINO" &
INGRESOS >= 24000 &
HIJOS>=1 &
(REGION=="LIMA_NORTE" |
REGION=="LIMA_ESTE"), ]
summary(clientes3_2)
detach(clientes) #Quitar attach
rm(clientes3_2)
clientes3_2 = clientes[SEXO=="FEMENINO" &
INGRESOS >= 24000 &
HIJOS>=1 &
(REGION=="LIMA_NORTE" |
REGION=="LIMA_ESTE"), ]
# Seleccionar la variable SEXO
head(clientes$SEXO)
head(clientes[,"SEXO"])
head(clientes[,3])
head(clientes[,"SEXO":"CASADO"]) # en python s? sale
head(clientes[,3:6])
head(clientes[,3:6])
tail(clientes[,3:6])
head(clientes[,3:6], 20)
head(clientes[,3:6], 20)
clientes$M1 = clientes$INGRESOS / (clientes$EDAD*10)
band = read.csv("band.csv")
instrument = read.csv("instrument.csv")
band
instrument
library(dplyr)
band
instrument
left_join(band, instrument, by="name")
left_join(band, instrument, by="name")
right_join(band, instrument, by="name")
band
instrument
band
instrument
left_join(band, instrument, by="name")
right_join(band, instrument, by="name")
band
instrument
left_join(band, instrument, by="name")
right_join(band, instrument, by="name")
band
instrument
right_join(band, instrument, by="name")
inner_join(band, instrument, by="name")
full_join(band, instrument, by="name")
View(band)
View(band)
View(band)
# REVISAR: outer join - inner join
version
dep2016 = read.csv("Depositos_2016.csv")
dep2017 = read.csv("Depositos_2017.csv")
dep2016
dep_2016_2017 = rbind(dep2016, dep2017)
dep_2016_2017
paises = data.frame(country = c("FR", "DE", "US"),
a2011 = c(7000, 5800, 15000),
a2012 = c(6900, 6000, 14000),
a2013 = c(7000, 6200, 13000))
paises
paises2 = gather(paises, key = "años", value = "cant", 2:4)
paises2
library(tidyr)
paises2 = gather(paises, key = "años", value = "cant", 2:4)
paises2
paises
paises2 = gather(paises, key = "años", value = "cant", 1:4)
paises2
paises2 = gather(paises, key = "años", value = "cant", 2:4)
paises2
paises3 = spread(paises2, key = "años", value = "cant")
paises3
paises
str(paises2)
str(paises2)
paises2
summarise(group_by(paises2, años)
paises2_resumen1 = summarise(group_by(paises2, años)
summarise(group_by(paises2, años)
paises2_resumen1 = summarise(group_by(paises2, años),
cant_min = min(cant),
cant_max = max(cant),
cant_prom = mean(cant),
cant_sum = sum(cant),
cant_desv = sd(cant),
cant_med = median(cant))
library(dplyr)
paises2_resumen1 = summarise(group_by(paises2, años),
cant_min = min(cant),
cant_max = max(cant),
cant_prom = mean(cant),
cant_sum = sum(cant),
cant_desv = sd(cant),
cant_med = median(cant))
summarise(group_by(paises2, años)
paises2_resumen1 = group_by(paises2, años) %>% sumarize(
cant_min = min(cant),
cant_max = max(cant),
cant_prom = mean(cant),
cant_sum = sum(cant),
cant_desv = sd(cant),
cant_med = median(cant))
paises2_resumen1 = summarise(group_by(paises2, años),
cant_min = min(cant),
cant_max = max(cant),
cant_prom = mean(cant),
cant_sum = sum(cant),
cant_desv = sd(cant),
cant_med = median(cant))
paises2_resumen1
paises2_resumen1 = paises2 %>% group_by(años) %>% sumarize(
cant_min = min(cant),
cant_max = max(cant),
cant_prom = mean(cant),
cant_sum = sum(cant),
cant_desv = sd(cant),
cant_med = median(cant))
library(dplyr)
paises2_resumen1 = paises2 %>% group_by(años) %>%
summarize(
cant_min = min(cant),
cant_max = max(cant),
cant_prom = mean(cant),
cant_sum = sum(cant),
cant_desv = sd(cant),
cant_med = median(cant))
paises2_resumen1
paises2_resumen1
clientes_rep = summarise(group_by(clientes, SEXO, REGION),
Ingr_min = min(INGRESOS),
Ingr_max = max(INGRESOS),
Ingr_prom = mean(INGRESOS),
Ingr_rango = (Ingr_max-Ingr_min))
clientes_rep
write.csv(clientes_rep, 'cliente_rep_exp.csv', row.names = F)
clientes
clientes %>%
group_by(SEXO, REGION) %>%
summarise(Ingr_min = min(INGRESOS),
Ingr_max = max(INGRESOS),
Ingr_prom = mean(INGRESOS),
Ingr_rang = Ingr_max - Ingr_min)
clientes_calc <- clientes %>%
group_by(SEXO, REGION) %>%
summarise(Ingr_min = min(INGRESOS),
Ingr_max = max(INGRESOS),
Ingr_prom = mean(INGRESOS),
Ingr_rang = Ingr_max - Ingr_min)
clientes_calc
clientes_rep
library(openxlsx)
install.packages("openxlsx")
library(openxlsx)
setwd("F:/Cursos/SDC/P de Espec en R 2021/Modulo1/datasets")
library(foreign)
enahoM01 = read.spss('Enaho01-2019-100.sav', to.data.frame = T)
# Seleccionar ciertas columnas y registros
install.packages("foreign")
install.packages("foreign")
library(foreign)
enahoM01 = read.spss('Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = read.spss('Datasets1/Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = enahoM01[,c(1:14, 24:32, 34:37, 47:48, 58:59, 69:70,
80:83, 131:133, 141, 191:193, 318:322)]
enahoM01
enahoM01 = read.spss('Datasets1/Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = enahoM01[,c(1:14, 24:32, 34:37, 47:48, 58:59, 69:70,
80:83, 131:133, 141, 191:193, 318:322)]
setwd("D:/Desktop/UNMSM/SDC-Learning/R_SDC\/Datasets1")
setwd("D:/Desktop/UNMSM/SDC-Learning/R_SDC/Datasets1")
library(foreign)
enahoM01 = read.spss('687-Modulo01/Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = read.spss('687-Modulo01/Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = read.spss('Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = enahoM01[,c(1:14, 24:32, 34:37, 47:48, 58:59, 69:70,
80:83, 131:133, 141, 191:193, 318:322)]
library(psych)
install.packages("psych")
describe(enahoM01) # espacio en console
enahoM01 = enahoM01[enahoM01$RESULT == 'Completa',]
describe(enahoM01) # espacio en console
library(psych)
describe(enahoM01) # espacio en console
library(skimr)
install.packages("skimr")
library(skimr)
skim(enahoM01) # espacio en console
#library(devtools)
install.packages("visdat")
library(visdat)
vis_miss(enahoM01, warn_large_data = F)
vis_dat(enahoM01, warn_large_data = F)
vis_miss(enahoM01, warn_large_data = F)
library(VIM)
library(VIM)
aggr(enahoM01)
head(is.na(enahoM01))
sum(is.na(enahoM01))
Colna = colSums(is.na(enahoM01))
Colna
sort(Colna, decreasing = T)
library(ggplot2)
library(plotly)
ggplot(enahoM01,aes(x=P1172.01)) + geom_histogram()
ggplot(enahoM01,aes(x=P1172.01)) + geom_histogram()
# creando enahoM01_2 ...
summary(enahoM01$P1172.01)
enahoM01_2 = enahoM01[enahoM01$P1172.01 > 0,]
summary(enahoM01_2$P1172.01)
ggplot(enahoM01_2,aes(x=P1172.01)) + geom_histogram(color="black", fill="green")
ggplotly(ggplot(enahoM01_2,aes(x=P1172.01)) +
geom_histogram(color="red", fill="yellow"))
table(enahoM01_2$P101)
ggplot(enahoM01_2,aes(x=P1172.01,fill=P101))+geom_histogram()
ggplotly(ggplot(enahoM01_2,aes(x=P1172.01,fill=P101))+geom_histogram())
library(GGally)
summary(enahoM01_3$P1172.12)
enahoM01_4 = enahoM01_3[enahoM01_3$P1172.12 > 0,]
summary(enahoM01_4$P1172.12)
table(enahoM01_2$P101)
ggplot(enahoM01_2,aes(x=P1172.01,fill=P101))+geom_histogram()
ggplotly(ggplot(enahoM01_2,aes(x=P1172.01,fill=P101))+geom_histogram())
ggplot(enahoM01_2,aes(x=P1172.01))+geom_histogram()+facet_grid(.~P101)
ggplotly(ggplot(enahoM01_2,aes(x=P1172.01))+geom_histogram()+facet_grid(.~P101))
ggplotly(ggplot(enahoM01_2,aes(x=P1172.01))+geom_histogram()+facet_wrap(~P101))
ggplot(enahoM01_2,aes(x="gasto mensual agua",y=P1172.01))+geom_boxplot()
ggplotly(ggplot(enahoM01_2,aes(x="gasto mensual agua",y=P1172.01))+geom_boxplot())
ggplot(enahoM01_2,aes(x=P101,y=P1172.01))+geom_boxplot()
ggplotly(ggplot(enahoM01_2,aes(x=P101,y=P1172.01))+geom_boxplot())
ggplot(enahoM01_2,aes(x=P101,y=P1172.01,fill=P101))+geom_boxplot()
ggplotly(ggplot(enahoM01_2,aes(x=P101,y=P1172.01,fill=P101))+geom_boxplot())
summary(enahoM01_2$P1172.02)
enahoM01_3 = enahoM01_2[enahoM01_2$P1172.02 > 0,]
summary(enahoM01_3$P1172.02)
ggplot(enahoM01_3,aes(x=P1172.01, y=P1172.02))+geom_point()
ggplot(enahoM01_3,aes(x=P1172.01, y=P1172.02))+geom_point()+
stat_smooth(method = "lm")
ggplot(enahoM01_3,aes(x=P1172.01, y=P1172.02))+geom_point()+
stat_smooth(method = "lm")+facet_grid(.~P101)
ggplotly(ggplot(enahoM01_3,aes(x=P1172.01, y=P1172.02))+geom_point()+
stat_smooth(method = "lm")+facet_grid(.~P101))
ggplot(enahoM01_3,aes(x=P1172.01, y=P1172.02))+geom_point()+
stat_smooth(method = "lm")+facet_wrap(~P101)
library(GGally)
summary(enahoM01_3$P1172.12)
enahoM01_4 = enahoM01_3[enahoM01_3$P1172.12 > 0,]
summary(enahoM01_4$P1172.12)
mean(enahoM01_4$P1172.12)
mean(enahoM01_4$P1172.12, na.rm = T)
ggpairs(enahoM01_4, columns = c("P1172.01", "P1172.02", "P1172.12"))
ggpairs(enahoM01_4, columns = c("P1172.01", "P1172.02", "P1172.12"),
mapping = aes(color=P101))
library(foreign)
setwd("D:/Desktop/UNMSM/SDC-Learning/R_SDC/Datasets1")
setwd("D:/Desktop/UNMSM/SDC-Learning/R_SDC/Datasets1")
enahoM01 = read.spss('687-Modulo01/Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = read.spss('Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = enahoM01[,c(1:14, 24:32, 34:37, 47:48, 58:59, 69:70,
80:83, 131:133, 141, 191:193, 318:322)]
enahoM01 = enahoM01[,c(15:18,20:21,25:26,31, 38:41)]
library(modeest)
mfv1(enahoM01$P101) # moda
summary(enahoM01_4$P103)
table(enahoM01_2$P101)
enahoM01_2 = enahoM01[enahoM01$P1172.01 > 0,]
summary(enahoM01_2$P1172.01)
ggplot(enahoM01_2,aes(x=P1172.01)) + geom_histogram(color="black", fill="green")
ggplotly(ggplot(enahoM01_2,aes(x=P1172.01)) +
geom_histogram(color="red", fill="yellow"))
table(enahoM01_2$P101)
ggplot(enahoM01_2,aes(x=P1172.01,fill=P101))+geom_histogram()
ggplotly(ggplot(enahoM01_2,aes(x=P1172.01,fill=P101))+geom_histogram())
ggplot(enahoM01_2,aes(x=P1172.01))+geom_histogram()+facet_grid(.~P101)
ggplotly(ggplot(enahoM01_2,aes(x=P1172.01))+geom_histogram()+facet_grid(.~P101))
summary(enahoM01_2$P1172.02)
enahoM01_3 = enahoM01_2[enahoM01_2$P1172.02 > 0,]
enahoM01_3
ggplot(enahoM01_3,aes(x=P1172.01, y=P1172.02))+geom_point()
ggplot(enahoM01_3,aes(x=P1172.01, y=P1172.02))+geom_point()+
stat_smooth(method = "lm")+facet_grid(.~P101)
summary(enahoM01_3$P1172.02)
summary(enahoM01_3$P1172.01)
summary(enahoM01_3$P1172.02)
library(foreign)
enahoM01 = read.spss('Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = enahoM01[,c(1:14, 24:32, 34:37, 47:48, 58:59, 69:70,
80:83, 131:133, 141, 191:193, 318:322)]
enahoM01 = read.spss('Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = read.spss('Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = read.spss('Datasets1/Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = enahoM01[,c(1:14, 24:32, 34:37, 47:48, 58:59, 69:70,
80:83, 131:133, 141, 191:193, 318:322)]
enahoM01 = enahoM01[,c(15:18,20:21,25:26,31, 38:41)]
str(enahoM01)
summary(enahoM01)
str(enahoM01)
table(enahoM01$P107B3) # conteo de categorias excepto NA
table(enahoM01$P107B3)/sum(table(enahoM01$P107B3))
library(skimr)
skim(enahoM01)
skim(enahoM01)
s = skim(enahoM01)
mode(s)
class(s)
str(s)
variab_comp = s[s$complete_rate > 0.77, 2:4]
head(variab_comp)
variab_comp$skim_variable
enahoM01_comp77 = enahoM01[,variab_comp$skim_variable]
enahoM01_comp77
enahoM01 = read.spss('Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = read.spss('Datasets1/Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = enahoM01[,c(1:14, 24:32, 34:37, 47:48, 58:59, 69:70,
80:83, 131:133, 141, 191:193, 318:322)]
table(enahoM01$RESULT)
table(enahoM01$RESULT)/sum(table(enahoM01$RESULT))
enahoM01 = enahoM01[enahoM01$RESULT == 'Completa',]
enahoM01
library(psych)
describe(enahoM01) # espacio en console
describe(enahoM01) # espacio en console
library(skimr)
skim(enahoM01) # espacio en console
library(visdat)
vis_miss(enahoM01, warn_large_data = F)
vis_dat(enahoM01, warn_large_data = F)
aggr(enahoM01)
library(VIM)
aggr(enahoM01)
library(modeest)
mfv1(enahoM01$P101) # moda
describe(enahoM01) # espacio en console
skim(enahoM01) # espacio en console
aggr(enahoM01)
library(simputation)
summary(enahoM01[,c('P1172.01', 'P1172.02')])
enahoM01_impMedia = impute_lm(enahoM01, P1172.01 + P1172.02 ~ 1) #Imputacion por la media
enahoM01_impMedia
summary(enahoM01_impMedia[,c('P1172.01', 'P1172.02')])
na.omit(enahoM01)
library(arules)
enahoM01$P1172.01_sturges = discretize(enahoM01$P1172.01, #valores a discretizar
method="interval", #metodo de intervalos de igual amplitud
breaks= sturges_nbins) #puntos c
sturges_nbins = nclass.Sturges(enahoM01$P1172.01)
enahoM01$P1172.01_sturges = discretize(enahoM01$P1172.01, #valores a discretizar
method="interval", #metodo de intervalos de igual amplitud
breaks= sturges_nbins) #puntos c
table(enahoM01$P1172.01_sturges)
skim(enahoM01$P1172.01)
hist(enahoM01$P1172.01)
nclass.Sturges(enahoM01$P1172.01)
str(enahoM01)
describe(enahoM01) # espacio en console
describe(enahoM01) # espacio en console
skim(enahoM01) # espacio en console
setwd("D:/Desktop/UNMSM/SDC-Learning/R_SDC/Datasets1")
library(foreign)
enahoM01 = read.spss('Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = enahoM01[,c(1:14, 24:32, 34:37, 47:48, 58:59, 69:70,
80:83, 131:133, 141, 191:193, 318:322)]
enahoM01 = enahoM01[,c(15:18,20:21,25:26,31, 38:41)]
library(skimr)
skim(enahoM01$P1172.01)
skim(enahoM01$P1172.01)
sturges_nbins = nclass.Sturges(enahoM01$P1172.01) #Regla de Sturges para discr.
#Crea intervalos de variables cuantitativas
sturges_nbins
library(arules)
enahoM01$P1172.01_sturges = discretize(enahoM01$P1172.01, #valores a discretizar
method="interval", #metodo de intervalos de igual amplitud
breaks= sturges_nbins) #puntos c
View(enahoM01)
table(enahoM01$P1172.01_sturges)
table(enahoM01$P1172.01_cuantil) #Solo salen 3 intervalos por la cantidad de 00.
enahoM01$P1172.01_cuantil = discretize(enahoM01$P1172.01, #valores
method="frequency", #metodo: intervalos de igual frecuencia
breaks= 4) #numero de categorias, cuantile 25, 50, 75, 100
table(enahoM01$P1172.01_cuantil) #Solo salen 3 intervalos por la cantidad de 00.
# creando otra data pero con valores mayores a cero
enahoM01_4 = enahoM01[enahoM01$P1172.01 > 0,]
summary(enahoM01_4$P1172.01)
enahoM01_4$P1172.01_cuantil = discretize(enahoM01_4$P1172.01, #valores
method="frequency", #metodo: intervalos de igual frecuencia
breaks= 4) #numero de categorias
View(enahoM01_4)
rm(enahoM01_4)
enahoM01[enahoM01$P1172.01 > 0,]
enahoM01[enahoM01$P1172.01 > 0 & !is.na(enahoM01$P1172.01),]
# creando otra data pero con valores mayores a cero
enahoM01_4 = enahoM01[enahoM01$P1172.01 > 0 & !is.na(enahoM01$P1172.01),]
summary(enahoM01_4$P1172.01)
rm(enahoM01_4)
# creando otra data pero con valores mayores a cero
enahoM01_4 = enahoM01[enahoM01$P1172.01 > 0 & !is.na(enahoM01$P1172.01),]
summary(enahoM01_4$P1172.01)
enahoM01_4$P1172.01_cuantil = discretize(enahoM01_4$P1172.01, #valores
method="frequency", #metodo: intervalos de igual frecuencia
breaks= 4) #numero de categorias
View(enahoM01_4)
table(enahoM01_4$P1172.01_cuantil)
table(enahoM01_4$P1172.01_cuantil) / sum(table(enahoM01_4$P1172.01_cuantil))
setwd("D:/Desktop/UNMSM/SDC-Learning/R_SDC/Datasets1")
enahoM01 = read.spss('687-Modulo01/Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = enahoM01[,c(1:14, 24:32, 34:37, 47:48, 58:59, 69:70,
80:83, 131:133, 141, 191:193, 318:322)]
library(foreign)
enahoM01 = read.spss('687-Modulo01/Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = enahoM01[,c(1:14, 24:32, 34:37, 47:48, 58:59, 69:70,
80:83, 131:133, 141, 191:193, 318:322)]
library(foreign)
enahoM01 = read.spss('687-Modulo01/Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = read.spss('Enaho01-2019-100.sav', to.data.frame = T)
enahoM01 = enahoM01[,c(1:14, 24:32, 34:37, 47:48, 58:59, 69:70,
80:83, 131:133, 141, 191:193, 318:322)]
enahoM01 = enahoM01[,c(15:18,20:21,25:26,31, 38:41)]
table(enahoM01$P107B3) # conteo de categorias excepto NA
table(enahoM01$P107B3)/sum(table(enahoM01$P107B3))
library(caTools)
set.seed(2021) #semilla
generar = sample.split(enahoM01$P107B3, #data$target
SplitRatio = 0.7)
set.seed(2021) #semilla
generar = sample.split(enahoM01$P107B3, #data$target
SplitRatio = 0.9)
table(generar)
table(generar) / sum(table(generar))
data(iris)
head(iris)
table(iris$Species)
View(iris)
set.seed(2021) #semilla
generar = sample.split(iris$Species, #data$target
SplitRatio = 0.7) #proporcion de datos de entrenamiento
table(generar)
table(generar) / sum(table(generar))
View(enahoM01)
d_entrenamiento = subset(enahoM01, generar == TRUE)
d_prueba = subset(enahoM01, generar == FALSE)
table(d_entrenamiento$P107B3)
table(d_entrenamiento$P107B3)/sum(table(d_entrenamiento$P107B3))
table(d_prueba$P107B3)
table(d_prueba$P107B3)/sum(table(d_prueba$P107B3))
nrow(d_entrenamiento) / nrow(enahoM01)
library(ROSE)
data.balanced1 = ovun.sample(P107B3 ~ ., #targe~.(ese punto significa que considere todas las var.)
data=d_entrenamiento, #data de entrenamiento
p=0.5, #proporcion de la etique menos representada
seed=2021, #semilla utilizada en casos aleatoridad
method="under",#metodo de balanceo
na.action=na.pass)
mode(data.balanced1)
data.balanced1 = ovun.sample(P107B3 ~ ., #targe~.(ese punto significa que considere todas las var.)
data=d_entrenamiento, #data de entrenamiento
p=0.5, #proporcion de la etique menos representada
seed=2021, #semilla utilizada en casos aleatoridad
method="under",#metodo de balanceo
na.action=na.pass)
data.balanced2 = ovun.sample(P107B3 ~ ., #target~.
data=d_entrenamiento, #data de entrenamiento
p=0.5, #proporcion que ahora representara la P107B3 minoritaria
seed=10, #semilla
method="over",#metodo
na.action=na.pass)
setwd("D:/Desktop/UNMSM/SDC-Learning/R_SDC/Datasets1")
percep = read.csv("rintro-chapter8.csv")
percep = read.csv("rintro-chapter8.csv")
head(percep)
aggregate(percep[, 1:9], list(percep$brand), mean)
